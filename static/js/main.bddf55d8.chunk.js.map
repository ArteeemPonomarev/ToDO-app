{"version":3,"sources":["TodoListHeader.jsx","TodoListTask.jsx","TodoListTasks.jsx","TodoListFooter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TodoListHeader","render","react_default","a","createElement","className","type","placeholder","React","Component","TodoListTask","props","_this","checked","bool","tech","TodoListTasks","src_TodoListTask","TodoListFooter","App","src_TodoListHeader","src_TodoListTasks","src_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAiBeA,qNAbXC,OAAS,WACL,OACSC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,kBAC/BL,EAAAC,EAAAC,cAAA,oCAPKI,IAAMC,YCWpBC,8MAVXT,OAAS,SAACU,GACN,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAMM,EAAKD,MAAML,KAAMO,QAASD,EAAKD,MAAMG,OAClDZ,EAAAC,EAAAC,cAAA,YAAOQ,EAAKG,oBALDP,IAAMC,WCelBO,8MAbXf,OAAS,WACL,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACa,EAAD,CAAcX,KAAK,WAAWQ,MAAM,EAAMC,KAAK,QAC/Cb,EAAAC,EAAAC,cAACa,EAAD,CAAcX,KAAK,WAAWQ,MAAM,EAAOC,KAAK,OAChDb,EAAAC,EAAAC,cAACa,EAAD,CAAcX,KAAK,WAAWQ,MAAM,EAAOC,KAAK,YAChDb,EAAAC,EAAAC,cAACa,EAAD,CAAcX,KAAK,WAAWQ,MAAM,EAAMC,KAAK,2BAR/BP,IAAMC,WCWnBS,8MAXXjB,OAAS,WACL,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,sCANiBI,IAAMC,WCiBpBU,8MAbXlB,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,qBAPFd,IAAMC,WCMJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS3B,OAAOC,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bddf55d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass TodoListHeader extends React.Component {\r\n    render = () => {\r\n        return (\r\n                 <div className=\"todoList-header\">\r\n                    <h3 className=\"todoList-header__title\">What to Learn</h3>\r\n                    <div className=\"todoList-newTaskForm\">\r\n                        <input type=\"text\" placeholder=\"New task name\"/>\r\n                        <button>Add</button>\r\n                    </div>\r\n                </div>       \r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader;\r\n\r\n","import React from 'react';\r\n\r\n\r\nclass TodoListTask extends React.Component {\r\n    render = (props) => {\r\n        return (\r\n            <div className=\"todoList-task\">\r\n                <input type={this.props.type} checked={this.props.bool}/>\r\n                <span>{this.tech}</span>\r\n            </div>      \r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\n","import React from 'react';\r\nimport TodoListTask from './TodoListTask';\r\n\r\n\r\nclass TodoListTasks extends React.Component {\r\n    render = () => {\r\n        return (\r\n            \r\n        <div className=\"todoList-tasks\">\r\n            <TodoListTask type=\"checkbox\" bool={true} tech=\"CSS\" />\r\n            <TodoListTask type=\"checkbox\" bool={false} tech=\"JS\" />\r\n            <TodoListTask type=\"checkbox\" bool={false} tech=\"ReactJS\" />\r\n            <TodoListTask type=\"checkbox\" bool={true} tech=\"Patterns\" />\r\n        </div>      \r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n\r\n","import React from 'react';\r\n\r\n\r\nclass TodoListFooter extends React.Component {\r\n    render = () => {\r\n        return (\r\n        <div className=\"todoList-footer\">\r\n            <button>All</button>\r\n            <button>Completed</button>\r\n            <button>Active</button>\r\n        </div>     \r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoListHeader from './TodoListHeader';\r\nimport TodoListTasks from './TodoListTasks';\r\nimport TodoListFooter from './TodoListFooter';\r\n\r\nclass App extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <TodoListHeader />\r\n                    <TodoListTasks />\r\n                    <TodoListFooter />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}